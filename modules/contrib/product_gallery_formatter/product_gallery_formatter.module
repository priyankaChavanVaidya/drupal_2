<?php
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme().
 */
function product_gallery_formatter_theme() {
  return array(
    'product_image_list' => array(
            'variables' => array('items' => array(), 'title' => '', 'list_type' => 'div', 'wrapper_attributes' => array(), 'attributes' => array(), 'empty' => NULL, 'context' => array()),
    ),
  );
}

/**
 * template_preprocess_product_image_list()
 */
function template_preprocess_product_image_list(&$variables) {
  $variables['wrapper_attributes'] = new Attribute($variables['wrapper_attributes']);
  foreach ($variables['items'] as &$item) {
    $attributes = array();
    // If the item value is an array, then it is a render array.
    if (is_array($item)) {
      // List items support attributes via the '#wrapper_attributes' property.
      if (isset($item['#wrapper_attributes'])) {
        $attributes = $item['#wrapper_attributes'];
      }
      // Determine whether there are any child elements in the item that are not
      // fully-specified render arrays. If there are any, then the child
      // elements present nested lists and we automatically inherit the render
      // array properties of the current list to them.
      foreach (Element::children($item) as $key) {
        $child = &$item[$key];
        // If this child element does not specify how it can be rendered, then
        // we need to inherit the render properties of the current list.
        if (!isset($child['#type']) && !isset($child['#theme']) && !isset($child['#markup'])) {
          // Since item-list.html.twig supports both strings and render arrays
          // as items, the items of the nested list may have been specified as
          // the child elements of the nested list, instead of #items. For
          // convenience, we automatically move them into #items.
          if (!isset($child['#items'])) {
            // This is the same condition as in
            // \Drupal\Core\Render\Element::children(), which cannot be used
            // here, since it triggers an error on string values.
            foreach ($child as $child_key => $child_value) {
              if ($child_key[0] !== '#') {
                $child['#items'][$child_key] = $child_value;
                unset($child[$child_key]);
              }
            }
          }
          // Lastly, inherit the original theme variables of the current list.
          $child['#theme'] = $variables['theme_hook_original'];
          $child['#list_type'] = $variables['list_type'];
        }
      }
    }

    // Set the item's value and attributes for the template.
    $item = array(
      'value' => $item,
      'attributes' => new Attribute($attributes),
    );
  }
}

/**
 * Implements hook_form_alter().
 */
function product_gallery_formatter_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
	if($form_id == 'commerce_line_item_product_variation_add_to_cart_form') {
		$pre = $form['#markup'];
		// Retrieve an array which contains the path pieces.
		$path = \Drupal::service('path.current')->getPath();
		$params = \Drupal\Core\Url::fromUserInput($path)->getRouteParameters();
		//$product = \Drupal\commerce_product\Entity\Product::load($params['commerce_product']);

		    $query = db_select('commerce_product_variation_field_data', 'v');
			$query->addField('v', 'sku');
			$query->addField('v', 'price__amount');
			$query->condition('v.product_id', $params['commerce_product']);
			$product_details = $query->execute()->fetchAll();
		    //kint($product_details[0]->sku);
			$sku = split('_',$product_details[0]->sku);
			$price = number_format($product_details[0]->price__amount,2,'.',',');

		    $op = '<div class="price field field--label-inline"><div class="field--label">Price</div><div class="field--item">$ '.$price.'</div></div>';
		    $op .= '<div class="sku field field--label-inline"><div class="field--label">SKU</div><div class="field--item">'.$sku[0].'</div></div>';
		$form['#markup'] = $op.$pre;
		//kint($form['#prefix']);
	}

}

function _get_sku($product_id) {
	$query = db_select('commerce_product_variation_field_data', 'v');
	$query->addField('v', 'sku');
	$query->addField('v', 'price__amount');
	$query->condition('v.product_id', $product_id);
	$product_details = $query->execute()->fetchAll();
	$sku = split('_',$product_details[0]->sku);
	$price = number_format($product_details[0]->price__amount,2,'.',',');
	return '$'.$price;
}
